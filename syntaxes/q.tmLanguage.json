{
  "description": "TextMate grammar for q, quke and qdoc. This file is auto generated DO NOT EDIT",
  "name": "q",
  "scopeName": "source.q",
  "patterns": [
    {
      "include": "#quke"
    },
    {
      "include": "#ranges"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#tokens"
    }
  ],
  "repository": {
    "quke": {
      "patterns": [
        {
          "begin": "(?i)(?<!.)[ \\t]*(x?feature)\\b(.*)",
          "captures": {
            "1": {
              "name": "support.function.q"
            },
            "2": {
              "name": "string.quoted.q"
            }
          },
          "patterns": [
            {
              "match": "(?i)(?<!.)[ \\t]*(x?(?:replicate|timelimit|tolerance|feature|should|bench))\\b(.*)",
              "captures": {
                "1": {
                  "name": "support.function.q"
                },
                "2": {
                  "name": "string.quoted.q"
                }
              }
            },
            {
              "match": "(?i)(?<!.)[ \\t]*(x?(?:before each|after each|behaviour|baseline|teardown|property|to match|skip if|expect|before|after|setup))\\b(.*)",
              "captures": {
                "1": {
                  "name": "support.function.q"
                },
                "2": {
                  "name": "string.quoted.q"
                }
              }
            },
            {
              "include": "#ranges"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#tokens"
            }
          ]
        }
      ]
    },
    "ranges": {
      "patterns": [
        {
          "name": "comment.block.q",
          "begin": "(?<!.)\\/[ \\t]*(?!.)",
          "end": "(?<!.)\\\\[ \\t]*(?!.)"
        },
        {
          "name": "comment.exit.q",
          "begin": "(?<!.)\\\\[ \\t]*(?!.)"
        },
        {
          "name": "comment.line.q",
          "match": "(?:(?<=[ \\t])|(?<!.))\\/{1,2}[ \\t]*(@(?:default-subcategory|default-category|file[oO]verview|subcategory|deprecated|overview|category|doctest|example|private|typedef|returns?|throws|author|param|kind|name|todo|desc|see|end))\\b.*",
          "captures": {
            "1": {
              "name": "keyword.other.qdoc"
            }
          }
        },
        {
          "name": "comment.line.q",
          "match": "(?:(?<=[ \\t])|(?<!.))\\/.*"
        },
        {
          "name": "string.quoted.q",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.q",
              "match": "\\\\([0-9]{3}|.{1})"
            }
          ]
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "support.type.symbol.q",
          "match": "`[/.:\\w]*"
        },
        {
          "name": "constant.numeric.datetime.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}T(?:\\d{2}:){1,2}\\d{2}\\.?\\d*"
        },
        {
          "name": "constant.numeric.timestamp.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}D(?:\\d{2}:){1,2}\\d{2}\\.?\\d*"
        },
        {
          "name": "constant.numeric.date.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}"
        },
        {
          "name": "constant.numeric.month.q",
          "match": "\\d{4}\\.\\d{2}m"
        },
        {
          "name": "constant.numeric.time.q",
          "match": "(?:0D)?(?:\\d{2}:){1,2}\\d{2}\\.?\\d*"
        },
        {
          "name": "constant.language.infinity.q",
          "match": "(?:0N[deghjmnptuvz]?|-?0[wW]|0n)"
        },
        {
          "name": "constant.numeric.binary.q",
          "match": "[01]+b"
        },
        {
          "name": "constant.numeric.byte.q",
          "match": "0x(?:[0-9a-fA-F]{2})+"
        },
        {
          "name": "constant.numeric.number.q",
          "match": "-?(?:\\d+\\.\\d+|\\.\\d+|\\d+\\.|\\d+)(?:e[+-]?\\d?\\d)?[jhife]?"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.q",
          "match": "(?<![A-Za-z0-9.])(?:while|if|do)(?![A-Za-z0-9._])"
        },
        {
          "name": "keyword.other.reserved.q",
          "match": "(?<![A-Za-z0-9.])(?:\\.h\\.(?:iso8601|code|edsn|fram|HOME|htac|html|http|logo|text|hta|htc|hug|nbr|pre|val|xmp|br|c0|c1|cd|ed|ha|hb|hc|he|hn|hp|hr|ht|hu|hy|jx|sa|sb|sc|td|tx|ty|uh|xd|xs|xt|d)|\\.j\\.(?:jd|[jk])|\\.m\\.(?:addmonths|dpfts|dsftg|addr|btoa|dpft|hdpf|host|view|chk|def|ens|fmt|fpn|fps|fsn|ind|j10|j12|MAP|opt|par|res|sbt|trp|x10|x12|b6|bt|bv|Cf|cn|dd|en|ff|fk|fs|ft|fu|gc|gz|hg|hp|id|nA|pd|PD|pf|pn|pt|pv|PV|qp|qt|s1|ts|ty|vp|Xf|[aADfklMPsuvVwx])|\\.[Qq]\\.(?:addmonths|dpfts|dsftg|addr|btoa|dpft|hdpf|host|sha1|view|chk|def|ens|fmt|fpn|fps|fsn|ind|j10|j12|MAP|opt|par|res|sbt|trp|x10|x12|b6|bt|bv|Cf|cn|dd|en|fc|ff|fk|fs|ft|fu|gc|gz|hg|hp|id|nA|pd|PD|pf|pn|pt|pv|PV|qp|qt|s1|ts|ty|vp|Xf|[aADfklMPsSuvVwx])|\\.z\\.(?:exit|ac|bm|ex|ey|pc|pd|pg|ph|pi|pm|po|pp|pq|ps|pw|ts|vs|wc|wo|ws|zd|[abcdDefhikKlnNopPqstTuwWxXzZ]))(?![A-Za-z0-9._])"
        },
        {
          "name": "keyword.other.q",
          "match": "(?<![A-Za-z0-9.])(?:reciprocal|distinct|ceiling|reverse|sublist|ungroup|delete|deltas|differ|enlist|except|getenv|hclose|hcount|insert|mcount|ratios|rotate|select|setenv|signum|string|system|tables|update|upsert|within|xgroup|count|cross|dsave|fills|first|fkeys|floor|group|gtime|hopen|idesc|inter|lower|ltime|ltrim|parse|peach|prior|read0|read1|reval|rload|rsave|rtrim|union|upper|value|views|where|while|xcols|xdesc|xprev|xrank|acos|ajf0|asin|asof|atan|attr|avgs|binr|cols|desc|each|eval|exec|exit|flip|from|hdel|hsym|iasc|keys|last|like|load|mavg|maxs|mdev|meta|mins|mmax|mmin|msum|next|null|over|prds|prev|rand|rank|raze|save|scan|scov|sdev|show|sqrt|sums|svar|trim|type|view|wavg|wsum|xasc|xbar|xcol|xexp|xkey|xlog|abs|aj0|ajf|all|and|any|asc|avg|bin|cor|cos|cov|csv|cut|dev|div|ema|exp|fby|get|ijf|inv|key|ljf|log|lsq|max|md5|med|min|mmu|mod|neg|not|prd|set|sin|ssr|sum|tan|til|ujf|var|wj1|aj|do|ej|if|ij|in|lj|or|pj|ss|sv|uj|vs|wj)(?![A-Za-z0-9._])"
        },
        {
          "name": "variable.other.q",
          "match": "(?<![A-Za-z0-9.])\\.?[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z0-9_]+)*(?![A-Za-z0-9._])"
        }
      ]
    },
    "tokens": {
      "patterns": [
        {
          "name": "constant.character.q",
          "match": "(?<!.)\\\\(?:cd|ts|[abBcCdefglopPrsStTuvwWxz12_\\\\])(?:(?! \\/).)*"
        },
        {
          "name": "keyword.other.iterator.q",
          "match": "[\\\\'/]:"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "(?:<=|>=|<>|[>=<~])"
        },
        {
          "name": "punctuation.assignment.q",
          "match": "::"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "(?<![a-zA-Z])_"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "!"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "[\\\\.,'|^?#@&%*+-]"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "\\$"
        },
        {
          "name": "punctuation.assignment.q",
          "match": ":"
        },
        {
          "name": "punctuation.terminator.statement.q",
          "match": ";"
        }
      ]
    }
  }
}