{
  "name": "q",
  "scopeName": "source.q",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#commands"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#namespaces"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#tests"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.q",
          "begin": "^\\/\\s*$",
          "end": "^\\\\\\s*$"
        },
        {
          "name": "comment.line.q",
          "match": "(?:(?<=\\r?\\n|[ \\t])|(?<!.))\\/.*"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.q",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.q",
              "match": "\\\\[\"\\\\]"
            }
          ]
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "name": "constant.character.q",
          "match": "\\\\(cd|ts|[abBcCdeEfglLopPrsStTuvwWxz_])"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.q",
          "match": ";"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "[\\+\\-\\%\\*]"
        },
        {
          "name": "keyword.operator.logical.q",
          "match": "(=|<>|~|<|<=|>=|>|\\|&)"
        },
        {
          "name": "keyword.operator.other.q",
          "match": "(::|':|/:|\\\\:|[:@\\\\!$#?'/,\\^])"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.null.q",
          "match": "\\b0N[hjenpmdznuvtg]\\b"
        },
        {
          "name": "constant.language.infinity.q",
          "match": "\\b0[wnWN]\\b"
        },
        {
          "name": "support.type.symbol.q",
          "match": "`:?\\w+\\b"
        }
      ]
    },

    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.binary.q",
          "match": "[01]+b"
        },
        {
          "name": "constant.numeric.byte.q",
          "match": "0x(?:[0-9a-fA-F]{2})+"
        },
        {
          "name": "constant.numeric.date.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}"
        },
        {
          "name": "constant.numeric.militime.q",
          "match": "\\d{2}:\\d{2}:\\d{2}\\.\\d{3}"
        },
        {
          "name": "constant.numeric.nanotime.q",
          "match": "(?:0D)?\\d{2}:\\d{2}:\\d{2}\\.\\d{9}"
        },
        {
          "name": "constant.numeric.datetime.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}"
        },
        {
          "name": "constant.numeric.timestamp.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}D\\d{2}:\\d{2}:\\d{2}\\.\\d{9}"
        },
        {
          "name": "constant.numeric.month.q",
          "match": "\\d{4}\\.\\d{2}m"
        },
        {
          "name": "constant.numeric.month.q",
          "match": "\\d{2}:\\d{2}:\\d{2}"
        },
        {
          "name": "constant.numeric.minute.q",
          "match": "\\d{2}:\\d{2}"
        },
        {
          "name": "constant.numeric.float.q",
          "match": "-?(?:\\d+\\.\\d+|\\.\\d+|\\d+\\.)(?:e[+-]?\\d?\\d)?e?"
        },
        {
          "name": "constant.numeric.integer.q",
          "match": "-?\\d+[jhi]?"
        }
      ]
    },
    "namespaces": {
      "patterns": [
        {
          "name": "keyword.other.namespaces.h.q",
          "match": "\\.h\\.(br|code|fram|ha|hb|ht|hta|htac|htc|html|http|nbr|pre|he|hn|hp|hy|hu|hug|sc|uh|sa|text|xmp|cd|d|ed|edsn|hc|hr|iso8601|jx|td|tx|xd|xs|xt|c0|c1|HOME|logo|sb|ty|val)\\b"
        },
        {
          "name": "keyword.other.namespaces.j.q",
          "match": "\\.j\\.(j|k|jd)\\b"
        },
        {
          "name": "keyword.other.namespaces.q.q",
          "match": "\\.[Qq]\\.(addmonths|Cf|Xf|btoa|j10|j12|M|ty|x10|x12|chk|dpft|dpfts|dsftg|en|ens|fk|hdpf|qt|qp|bv|ind|cn|MAP|D|par|PD|pd|pf|pn|qp|pt|PV|pv|vp|D|P|u|bt|dd|def|f|ff|fmt|ft|fu|gc|gz|id|qt|res|s|s1|sbt|trp|ts|u|V|v|view|A|a|b6|nA|k|opt|w|x|addr|fps|fpn|fs|fsn|hg|host|hp|l)\\b"
        },
        {
          "name": "keyword.other.namespaces.z.q",
          "match": "\\.z\\.(a|b|c|D/d|e|ex|ey|f|h|i|K|k|l|N|n|o|P|p|pm|q|s|T|t|u|W|w|X|x|Z|z|zd|ac|bm|exit|pc|pd|pg|ph|pi|po|pp|pq|ps|pw|ts|vs|wc|wo|ws)\\b"
        },
        {
          "name": "keyword.other.namespaces.m.q",
          "match": "\\.m\\.\\w+\\b"
        },
        {
          "name": "keyword.other.namespaces.q",
          "match": "\\.[hjqQzm]\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.q",
          "match": "\\b(do|exit|if|while)\\b"
        },
        {
          "name": "keyword.other.env.q",
          "match": "\\b(getenv|gtime|ltime|setenv)\\b"
        },
        {
          "name": "keyword.other.interpret.q",
          "match": "\\b(eval|parse|reval|show|system|value)\\b"
        },
        {
          "name": "keyword.other.io.q",
          "match": "\\b(dsave|get|hclose|hcount|hdel|hopen|hsym|load|read0|read1|rload|rsave|save|set)\\b"
        },
        {
          "name": "keyword.other.iterate.q",
          "match": "\\b(each|over|peach|prior|scan)\\b"
        },
        {
          "name": "keyword.other.join.q",
          "match": "\\b(aj|aj0|ajf|ajf0|asof|ej|ij|ijf|lj|ljf|pj|uj|ujf|wj|wj1)\\b"
        },
        {
          "name": "keyword.other.list.q",
          "match": "\\b(count|cross|cut|enlist|except|fills|first|flip|group|in|inter|last|mcount|next|prev|raze|reverse|rotate|sublist|sv|til|union|vs|where|xprev)\\b"
        },
        {
          "name": "keyword.other.logic.q",
          "match": "\\b(all|and|any|not|or)\\b"
        },
        {
          "name": "keyword.other.math.q",
          "match": "\\b(abs|acos|asin|atan|avg|avgs|ceiling|cor|cos|cov|deltas|dev|div|ema|exp|floor|inv|log|lsq|mavg|max|maxs|mdev|med|min|mins|mmax|mmin|mmu|mod|msum|neg|prd|prds|rand|ratios|reciprocal|scov|sdev|signum|sin|sqrt|sum|sums|svar|tan|var|wavg|within|wsum|xexp|xlog)\\b"
        },
        {
          "name": "keyword.other.meta.q",
          "match": "\\b(attr|null|tables|type|view|views)\\b"
        },
        {
          "name": "keyword.other.query.q",
          "match": "\\b(delete|exec|fby|from|select|update)\\b"
        },
        {
          "name": "keyword.other.sort.q",
          "match": "\\b(asc|bin|binr|desc|differ|distinct|iasc|idesc|rank|xbar|xrank)\\b"
        },
        {
          "name": "keyword.other.table.q",
          "match": "\\b(cols|csv|fkeys|insert|key|keys|meta|ungroup|upsert|xasc|xcol|xcols|xdesc|xgroup|xkey)\\b"
        },
        {
          "name": "keyword.other.text.q",
          "match": "\\b(like|lower|ltrim|md5|rtrim|ss|ssr|string|trim|upper)\\b"
        }
      ]
    },
    "tests": {
      "patterns": [
        {
          "name": "support.function.q",
          "match": "\\b(before|after|skip)\\b\\s+"
        },
        {
          "match": "\\bx?(feature|should|expect|bench|property)\\b\\s+(.*)",
          "captures": {
            "1": {
              "name": "support.function.q"
            },
            "2": {
              "name": "string.quoted.q"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.q",
          "match": "(\\.[A-Za-z][A-Za-z_0-9.]*(?<!\\.)|[A-Za-z][A-Za-z_0-9]*)\\b"
        }
      ]
    }
  }
}
