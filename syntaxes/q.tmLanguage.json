{
  "name": "q",
  "scopeName": "source.q",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#qtest"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#commands"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.q",
          "begin": "^\\/\\s*$",
          "end": "^\\\\\\s*$"
        },
        {
          "name": "comment.last.q",
          "begin": "^\\\\\\s*$"
        },
        {
          "include": "#qdoc"
        },
        {
          "name": "comment.line.q",
          "match": "(?:(?<=[ \\t])|(?<!.))\\/.*"
        }
      ]
    },
    "qdoc": {
      "patterns": [
        {
          "name": "comment.qdoc",
          "begin": "(?:(?<=\\r?\\n|[ \\t])|(?<!.))\\/\\/",
          "end": "\\r?\\n",
          "patterns": [
            {
              "name": "storage.type.qdoc",
              "match": "@\\b(?:author|category|deprecated|doctest|end|example|fileoverview|kind|name|private|see|subcategory|throws|todo|default-category|default-subcategory|typedef|fileOverview|param|desc|return[s]?|overview)\\b"
            },
            {
              "name": "keyword.control.qdoc",
              "begin": "{",
              "end": "}",
              "patterns": [
                {
                  "name": "entity.name.type.qdoc",
                  "match": "\\b(type|atom|anything|dict|enum|function|hsym|option|string|table|tuple|typedef|vector|bool|boolean|byte|char|character|date|datetime|float|guid|int|integer|long|minute|month|real|second|short|string|symbol|time|timespan|timestamp)\\b"
                }
              ]
            },
            {
              "name": "variable.other.qdoc",
              "match": "[\\w.]+?(?=\\s*{.+})"
            },
            {
              "name": "variable.other.qdoc",
              "match": "\\s\\.[\\w.]+?\\s"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.q",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.q",
              "match": "\\\\[\"\\\\]"
            }
          ]
        }
      ]
    },
    "qtest": {
      "patterns": [
        {
          "name": "comment.feature.q",
          "begin": "\\b[x]feature\\b",
          "end": "^(?=\\S)"
        },
        {
          "name": "comment.should.q",
          "begin": "\\b[x]should\\b",
          "end": "^((?=\\S)|\\s+(?=[x]?should))\\b"
        },
        {
          "name": "comment.other.q",
          "begin": "\\b[x](expect|bench|property)\\b",
          "end": "^((?=\\S)|\\s+(?=[x]?(should|expect|bench|property)))\\b"
        },
        {
          "name": "support.function.q",
          "match": "\\b(before|after|skip)\\b"
        },
        {
          "match": "\\b(feature|should|expect|bench|property)\\b\\s+(.*)",
          "captures": {
            "1": {
              "name": "support.function.q"
            },
            "2": {
              "name": "string.quoted.q"
            }
          }
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "support.type.symbol.q",
          "match": "`[.:\\w]*"
        },
        {
          "name": "constant.numeric.datetime.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}T(?:\\d{2}:){1,2}\\d{2}\\.?\\d*"
        },
        {
          "name": "constant.numeric.timestamp.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}D(?:\\d{2}:){1,2}\\d{2}\\.?\\d*"
        },
        {
          "name": "constant.numeric.date.q",
          "match": "\\d{4}\\.\\d{2}\\.\\d{2}"
        },
        {
          "name": "constant.numeric.month.q",
          "match": "\\d{4}\\.\\d{2}m"
        },
        {
          "name": "constant.numeric.time.q",
          "match": "(?:0D)?(?:\\d{2}:){1,2}\\d{2}\\.?\\d*"
        },
        {
          "name": "constant.numeric.file.q",
          "match": "[012]:"
        },
        {
          "name": "constant.language.infinity.q",
          "match": "(?:0N[deghjmnptuvz]?|-?0[wW]|0n)"
        },
        {
          "name": "constant.numeric.binary.q",
          "match": "[01]+b"
        },
        {
          "name": "constant.numeric.byte.q",
          "match": "0x(?:[0-9a-fA-F]{2})+"
        },
        {
          "name": "constant.numeric.number.q",
          "match": "-?(?:\\d+\\.\\d+|\\.\\d+|\\d+\\.|\\d+)(?:e[+-]?\\d?\\d)?[jhife]?"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.other.reserved.q",
          "match": "(?:\\.h\\.(?:iso8601|code|edsn|fram|HOME|htac|html|http|logo|text|hta|htc|hug|nbr|pre|val|xmp|br|c0|c1|cd|ed|ha|hb|hc|he|hn|hp|hr|ht|hu|hy|jx|sa|sb|sc|td|tx|ty|uh|xd|xs|xt|d)|\\.j\\.(?:jd|[jk])|\\.m\\.(?:addmonths|dpfts|dsftg|addr|btoa|dpft|hdpf|host|view|chk|def|ens|fmt|fpn|fps|fsn|ind|j10|j12|MAP|opt|par|res|sbt|trp|x10|x12|b6|bt|bv|Cf|cn|dd|en|ff|fk|fs|ft|fu|gc|gz|hg|hp|id|nA|pd|PD|pf|pn|pt|pv|PV|qp|qt|s1|ts|ty|vp|Xf|[aADfklMPsuvVwx])|\\.[Qq]\\.(?:addmonths|dpfts|dsftg|addr|btoa|dpft|hdpf|host|sha1|view|chk|def|ens|fmt|fpn|fps|fsn|ind|j10|j12|MAP|opt|par|res|sbt|trp|x10|x12|b6|bt|bv|Cf|cn|dd|en|fc|ff|fk|fs|ft|fu|gc|gz|hg|hp|id|nA|pd|PD|pf|pn|pt|pv|PV|qp|qt|s1|ts|ty|vp|Xf|[aADfklMPsSuvVwx])|\\.z\\.(?:exit|ac|bm|ex|ey|pc|pd|pg|ph|pi|pm|po|pp|pq|ps|pw|ts|vs|wc|wo|ws|zd|[abcdDefhikKlnNopPqstTuwWxXzZ]))\\b"
        },
        {
          "name": "keyword.other.q",
          "match": "\\b(?:reciprocal|distinct|ceiling|reverse|sublist|ungroup|delete|deltas|differ|enlist|except|getenv|hclose|hcount|insert|mcount|ratios|rotate|select|setenv|signum|string|system|tables|update|upsert|within|xgroup|count|cross|dsave|fills|first|fkeys|floor|group|gtime|hopen|idesc|inter|lower|ltime|ltrim|parse|peach|prior|read0|read1|reval|rload|rsave|rtrim|union|upper|value|views|where|while|xcols|xdesc|xprev|xrank|acos|ajf0|asin|asof|atan|attr|avgs|binr|cols|desc|each|eval|exec|exit|flip|from|hdel|hsym|iasc|keys|last|like|load|mavg|maxs|mdev|meta|mins|mmax|mmin|msum|next|null|over|prds|prev|rand|rank|raze|save|scan|scov|sdev|show|sqrt|sums|svar|trim|type|view|wavg|wsum|xasc|xbar|xcol|xexp|xkey|xlog|abs|aj0|ajf|all|and|any|asc|avg|bin|cor|cos|cov|csv|cut|dev|div|ema|exp|fby|get|ijf|inv|key|ljf|log|lsq|max|md5|med|min|mmu|mod|neg|not|prd|set|sin|ssr|sum|tan|til|ujf|var|wj1|aj|do|ej|if|ij|in|lj|or|pj|ss|sv|uj|vs|wj)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.q",
          "match": "\\.?[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z0-9_]+)*\\b"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "name": "constant.character.q",
          "match": "(?<!.)\\\\(?:cd|ts|[abBcCdefglopPrsStTuvwWxz12_\\\\]).*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.other.iterator.q",
          "match": "[\\\\'/]:"
        },
        {
          "name": "keyword.other.control.q",
          "match": "[$!?#@'^]"
        },
        {
          "name": "keyword.operator.arithmetic.q",
          "match": "[_,.'^?!#@$&|%*+-]"
        },
        {
          "name": "punctuation.assignment.q",
          "match": ":"
        },
        {
          "name": "punctuation.terminator.statement.q",
          "match": ";"
        }
      ]
    }
  }
}