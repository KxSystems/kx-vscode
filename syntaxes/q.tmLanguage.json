{
  "name": "q",
  "scopeName": "source.q",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#tests"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.q",
          "match": "(\\s+/|^/).*?\\S+.*"
        },
        {
          "name": "comment.block.q",
          "begin": "^/\\s*$",
          "end": "^\\\\\\s*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.q",
          "begin": "\"",
          "end": "\""
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.null.q",
          "match": "\\b0N[hjenpmdznuvt]\\b"
        },
        {
          "name": "constant.language.infinity.q",
          "match": "\\b0[wnWN]\\b"
        },
        {
          "name": "support.type.symbol.q",
          "match": "`\\w*"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.boolean.q",
          "match": "[01]+b"
        },
        {
          "name": "constant.numeric.byte.q",
          "match": "0x[0-9A-Fa-f]+"
        },
        {
          "name": "constant.numeric.number.q",
          "match": "([0-9]+([.][0-9]*)?|[.][0-9]+)(h|i|j|f|e)?"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.q",
          "match": "\\b(do|exit|if|while)\\b"
        },
        {
          "name": "keyword.other.env.q",
          "match": "\\b(getenv|gtime|ltime|setenv)\\b"
        },
        {
          "name": "keyword.other.interpret.q",
          "match": "\\b(eval|parse|reval|show|system|value)\\b"
        },
        {
          "name": "keyword.other.io.q",
          "match": "\\b(dsave|get|hclose|hcount|hdel|hopen|hsym|load|read0|read1|rload|rsave|save|set)\\b"
        },
        {
          "name": "keyword.other.iterate.q",
          "match": "\\b(each|over|peach|prior|scan)\\b"
        },
        {
          "name": "keyword.other.join.q",
          "match": "\\b(aj|aj0|ajf|ajf0|asof|ej|ij|ijf|lj|ljf|pj|uj|ujf|wj|wj1)\\b"
        },
        {
          "name": "keyword.other.list.q",
          "match": "\\b(count|cross|cut|enlist|except|fills|first|flip|group|in|inter|last|mcount|next|prev|raze|reverse|rotate|sublist|sv|til|union|vs|where|xprev)\\b"
        },
        {
          "name": "keyword.other.logic.q",
          "match": "\\b(all|and|any|not|or)\\b"
        },
        {
          "name": "keyword.other.math.q",
          "match": "\\b(abs|acos|asin|atan|avg|avgs|ceiling|cor|cos|cov|deltas|dev|div|ema|exp|floor|inv|log|lsq|mavg|max|maxs|mdev|med|min|mins|mmax|mmin|mmu|mod|msum|neg|prd|prds|rand|ratios|reciprocal|scov|sdev|signum|sin|sqrt|sum|sums|svar|tan|var|wavg|within|wsum|xexp|xlog)\\b"
        },
        {
          "name": "keyword.other.meta.q",
          "match": "\\b(attr|null|tables|type|view|views)\\b"
        },
        {
          "name": "keyword.other.query.q",
          "match": "\\b(delete|exec|fby|from|select|update)\\b"
        },
        {
          "name": "keyword.other.sort.q",
          "match": "\\b(asc|bin|binr|desc|differ|distinct|iasc|idesc|rank|xbar|xrank)\\b"
        },
        {
          "name": "keyword.other.table.q",
          "match": "\\b(cols|csv|fkeys|insert|key|keys|meta|ungroup|upsert|xasc|xcol|xcols|xdesc|xgroup|xkey)\\b"
        },
        {
          "name": "keyword.other.text.q",
          "match": "\\b(like|lower|ltrim|md5|rtrim|ss|ssr|string|trim|upper)\\b"
        }
      ]
    },
    "tests": {
      "patterns": [
        {
          "match": "(feature|should|expect|before|after)\\s+(.*)",
          "captures": {
            "1": {
              "name": "support.function.q"
            },
            "2": {
              "name": "string.quoted.q"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.q",
          "match": "\\w+"
        }
      ]
    }
  }
}
